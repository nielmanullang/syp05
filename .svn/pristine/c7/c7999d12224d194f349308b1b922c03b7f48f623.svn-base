<?php

namespace backend\controllers;

use Yii;
use common\models\DetailBuku;
use common\models\DetailBukuSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DetailBukuController implements the CRUD actions for DetailBuku model.
 */
class DetailBukuController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all DetailBuku models.
     * @return mixed
     */
//    public function actionIndex()
//    {
//        $searchModel = new DetailBukuSearch();
//        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
//
//        return $this->render('index', [
//            'searchModel' => $searchModel,
//            'dataProvider' => $dataProvider,
//        ]);
//    }
    public function actionIndex() {
//        $id = Yii::$app->user->id;
//        $pengguna = Pengguna::findOne(['id' => $id]);
        $searchModel = new \common\models\DetailDendaSearch();
        $dataProvider = new \yii\data\SqlDataProvider([
            'sql' => "SELECT t_m_pengguna.nama AS 'NAMA', t_m_pengguna.NI AS 'Nomor_Induk', t_d_peminjaman.rencana_kembali AS 'Tanggal_Kembali', t_d_denda.besar_denda AS 'Besar_Denda' FROM t_m_pengguna JOIN t_t_pesan_pinjam
                    ON t_m_pengguna.`id` = t_t_pesan_pinjam.`id_pengguna` JOIN t_d_peminjaman ON t_t_pesan_pinjam.`id` = t_d_peminjaman.`id_trans_peminjaman` JOIN
                    t_d_denda ON t_d_peminjaman.`id` = t_d_denda.id_detail_peminjaman WHERE t_d_peminjaman.`tgl_kembali` IS NULL AND besar_denda != 0"
        ]);

        return $this->render('index', [
                    'searchModel' => $searchModel,
                    'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single DetailBuku model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new DetailBuku model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new DetailBuku();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id_buku]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing DetailBuku model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id_buku]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing DetailBuku model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the DetailBuku model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return DetailBuku the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = DetailBuku::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
